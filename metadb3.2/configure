#
# MetaDB: A Distributed Metadata Collection Tool
# Copyright 2011, Lafayette College, Eric Luhrs, Haruki Yamaguchi, Long Ho.
#
# This file is part of MetaDB.
#
#    MetaDB is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    MetaDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with MetaDB.  If not, see <http://www.gnu.org/licenses/>.
#

# MetaDB Configuration Tool
# 
# Begin Configurations
#

#
# CONSTANTS
#

DB_CONFIG_PARSE=1
LDAP_CONFIG_PARSE=2
TOMCAT_CONFIG_PARSE=3
GLOBAL_VARS_PARSE=4
METADATA_ELEMENTS_PARSE=5
HTML_PARSE=6

DB_CONFIG_MODE="===DB_CONFIG==="
LDAP_CONFIG_MODE="===LDAP_CONFIG==="
TOMCAT_CONFIG_MODE="===TOMCAT_CONFIG==="
GLOBAL_VARS_MODE="===GLOBAL_VARS==="
METADATA_ELEMENTS_MODE="===METADATA_ELEMENTS==="
HTML_MODE="===INTRO_HTML==="
PARSE_DONE="===CONFIG_END==="

# File Locations
LOC_GLOBAL="webapp-src/src/edu/lafayette/metadb/model/commonops/Global.java"
LOC_HTML="webapp-src/web/intro.html"
LOC_CONTEXT="webapp-src/etc/context.xml"
LOC_BUILD="build.xml"
LOC_SQL="metadb-install.sql"

#
# VARIABLES
#
RUN_MODE=0

#
# End Configurations
#

#############################
#							#
#  DO NOT EDIT BEYOND HERE 	#
#							#
#############################

function isNumeric(){ [ "$(echo $*|grep -v "[^0-9]")" ];}
cat <<EOF 

MetaDB requires the following software:
>> Apache Tomcat v5.5.27
>> PostgreSQL v8.1.1
>> ImageMagick v6.2.8
>> Apache Ant v1.6.5
>> Java 6 SDK

And the following Java libraries:
>> Apache Commons File Upload v1.2.1
>> Apache Commons IO v1.4
>> Apache Commons Lang v2.4
>> Apache Commons Sanselan v0.97
>> JAI Core v1.1.3
>> JAI Image I/O Tools v1.1
>> JavaCSV v2.1

MetaDB may work with other software 
and library versions, but is known
to work with the versions specified.

EOF

#
# Run setup
#
#
DO_CHECK=0
DO_GENERATE=0

if [ $# = 0 ]; then
	DO_CHECK=1
	DO_GENERATE=1
else
	until [ 0 = $# ]
	do
		case "$1" in
		-c) DO_CHECK=1
			shift 1
			;;
		-g) DO_GENERATE=1
			shift 1
			;;
		-h)
			cat <<EOF
USAGE: please input the run parameter(s)
	-c -> runs check
	-g -> runs file generation
	-a -> runs all
EOF
			exit 0
			;;
		*) echo "Unknown command"
			exit 1
			;;
		esac
		
	done 
fi

echo -n "Currently reading metadb.conf ........................"


while read line   
do   
    read -n1 firstchar <<<$line
	if [ "$firstchar" != \# ] && [ "$firstchar" != " " ] && [ ${#firstchar} != 0 ]; then
		if [ "$line" = "$HTML_MODE" ]; then
			RUN_MODE=$HTML_PARSE
		elif [ "$line" = "$DB_CONFIG_MODE" ]; then
			RUN_MODE=$DB_CONFIG_PARSE
		elif [ "$line" = "$LDAP_CONFIG_MODE" ]; then
			RUN_MODE=$LDAP_CONFIG_PARSE
		elif [ "$line" = "$TOMCAT_CONFIG_MODE" ]; then
			RUN_MODE=$TOMCAT_CONFIG_PARSE
		elif [ "$line" = "$GLOBAL_VARS_MODE" ]; then
			RUN_MODE=$GLOBAL_VARS_PARSE
		elif [ "$line" = "$METADATA_ELEMENTS_MODE" ]; then
			RUN_MODE=$METADATA_ELEMENTS_PARSE
		elif [ "$line" = "$PARSE_DONE" ]; then
			RUN_MODE=0
		else
			if [ $HTML_PARSE = $RUN_MODE ]; then
				HTML_BODY=$HTML_BODY"\n"$line
			elif [ $DB_CONFIG_PARSE = $RUN_MODE ]; then
				line=${line//	/}
				line=${line// /}
				line=${line//\"/}
				DATA=(`echo $line | sed -e 's/==/\n/g'`)    
				if [ "${DATA[0]}" = "DB_USER" ]; then
					DB_USER="${DATA[1]}"
				else 
					DB_PASSWORD="${DATA[1]}"
				fi
			elif [ $TOMCAT_CONFIG_PARSE = $RUN_MODE ]; then
				line=${line//	/}
				line=${line// /}
				line=${line//\"/}
				DATA=(`echo $line | sed -e 's/==/\n/g'`)    
				if [ "${DATA[0]}" = "TOMCAT_PATH" ]; then
					TOMCAT_PATH="${DATA[1]}"
				elif [ "${DATA[0]}" = "TOMCAT_SYMBOLIC_LINK_PATH" ]; then
					TOMCAT_SYMBOLIC_LINK_PATH="${DATA[1]}"
				fi					
			elif [ $GLOBAL_VARS_PARSE = $RUN_MODE ]; then
				line=${line//	/}
				line=${line// /}
				line=${line//\"/}
				VARS=(${VARS[@]} "$line")
			elif [ $LDAP_CONFIG_PARSE = $RUN_MODE ]; then
				line=${line//	/}
				line=${line// /}
				line=${line//\"/}
				VARS=(${VARS[@]} "$line")
			elif [ $METADATA_ELEMENTS_PARSE = $RUN_MODE ]; then
				line=${line//	/}
				line=${line// /}
				METADATA=(${METADATA[@]} "$line")
			fi
		fi
	fi
done <metadb.conf

if [ $? = 0 ]; then
	echo "Done"
else echo "FAILED"
echo "Please check metadb.conf file"
exit 1
fi

#
# END PARSER
#

#
# System Check
#
#
if [ $DO_CHECK = 1 ]; then
	echo
	echo "Starting System Check:"

	echo "Locating Files ..."
                echo ""  

	echo -n -e "Locating Apache Commons File Upload .................."
	find webapp-src/lib/commons-fileupload-*.jar &> /dev/null
	if [ $? != 0 ]; then
		echo Missing
                echo ""  
		echo "Please download the package from:"
		echo "http://archive.apache.org/dist/commons/fileupload/binaries/commons-fileupload-1.2.1-bin.tar.gz"
		echo "and place commons-fileupload-1.2.1.jar in 'webapp-src/lib/' folder"
                echo ""  
	else echo Found
	fi

	echo -n -e "Locating Apache Commons Lang ........................."
	find webapp-src/lib/commons-lang-*.jar &> /dev/null
	if [ $? != 0 ]; then
		echo Missing
                echo ""  
		echo "Please download the package from:"
		echo "http://archive.apache.org/dist/commons/lang/binaries/commons-lang-2.4-bin.tar.gz"
		echo "and place commons-lang-2.4.jar in 'webapp-src/lib/' folder"
                echo ""  
	else echo Found
	fi

	echo -n -e "Locating Apache Commons I/O .........................."
	find webapp-src/lib/commons-io-*.jar &> /dev/null
	if [ $? != 0 ]; then
		echo Missing
                echo ""  
		echo "Please download the package from:"
		echo "http://archive.apache.org/dist/commons/io/binaries/commons-io-1.4-bin.tar.gz"
		echo "and place commons-io-1.4.jar in 'webapp-src/lib/' folder"
                echo ""  
	else echo Found
	fi

	echo -n -e "Locating Apache Incubator Sanselan ..................."
	find webapp-src/lib/sanselan*incubator.jar &> /dev/null
	if [ $? != 0 ]; then
		echo Missing
                echo ""  
		echo "Please download the package from:"
		echo "http://archive.apache.org/dist/commons/sanselan/binaries/apache-sanselan-incubating-0.97-bin.tar.gz"
		echo "and place sanselan-0.97-incubator.jar in 'webapp-src/lib/' folder"
                echo ""  
	else echo Found
	fi

	echo -n -e "Locating JAI Core ...................................."
	find webapp-src/lib/jai_core.jar &> /dev/null
	if [ $? != 0 ]; then
		echo Missing
                echo ""  
		echo "Please download the package from:"
		echo "http://download.java.net/media/jai/builds/release/1_1_3/jai-1_1_3-lib-linux-i586.tar.gz"
		echo "and place jai_core.jar in 'webapp-src/lib/' folder"
                echo ""  
	else echo Found
	fi

	echo -n -e "Locating JAI Codec ..................................."
	find webapp-src/lib/jai_codec*.jar &> /dev/null
	if [ $? != 0 ]; then
		echo Missing
                echo ""  
		echo "Please download the package from:"
		echo "http://download.java.net/media/jai/builds/release/1_1_3/jai-1_1_3-lib-linux-i586.tar.gz"
		echo "and place jai_codec.jar in 'webapp-src/lib/' folder"
                echo ""  
	else echo Found
	fi

	echo -n -e "Locating JAI Image I/O ..............................."
	find webapp-src/lib/jai_imageio*.jar &> /dev/null
	if [ $? != 0 ]; then
		echo Missing
                echo ""  
		echo "Please download the package from:"
		echo "http://download.java.net/media/jai-imageio/builds/release/1.1/jai_imageio-1_1-lib-linux-i586.tar.gz"
		echo "and place jai_imageio.jar in 'webapp-src/lib/' folder"
                echo ""  
	else echo Found
	fi

	echo -n -e "Locating JavaCSV ....................................."
	find webapp-src/lib/javacsv*.jar &> /dev/null
	if [ $? != 0 ]; then
		echo Missing
                echo ""  
		echo "Please download the package from:"
		echo "http://voxel.dl.sourceforge.net/project/javacsv/JavaCsv/JavaCsv%202.1/javacsv2.1.zip"
		echo "and place javacsv.jar in 'webapp-src/lib/' folder"
                echo ""  
	else echo Found
	fi
fi

#
# File Generation
#
#
if [ $DO_GENERATE = 1 ]; then
	echo -e "\nStarting File Generations:"

	echo -n -e "Generating intro.html ................................"
	# Generating the html file
	cat > "$LOC_HTML" <<EOF
<!--
MetaDB: A Distributed Metadata Collection Tool
Copyright 2011, Lafayette College, Eric Luhrs, Haruki Yamaguchi, Long Ho.

This file is part of MetaDB.

    MetaDB is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    MetaDB is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with MetaDB.  If not, see <http://www.gnu.org/licenses/>.
-->
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="keywords" content"MetaDBv32" />
<title>MetaDB Homepage</title>
</head>
<body>


<script type="text/javascript">
	\$(function() {
		\$('.login-button').button().click(function() {
			Authentication.loginValidate(); 
			return false;
		});

	});
</script>


<div class='m-ui-intro-content'>

<div style='width:40%; float:left; padding-left: 80px; padding-top: 25px'>

<h1 align="center">Welcome to MetaDB</h1>
<br/>
EOF
	echo -e "$HTML_BODY" >> "$LOC_HTML"
	cat >> "$LOC_HTML" <<EOF
</div> 			
 			
<div style='width:42%; float:right; padding-top: 90px; padding-right: 35px;'>
<div id="welcome" align="center">
	</div>   

<br/>
 <div id="loginForm" align='center'>
 <form id="loginHome" method="post">
 <table width="200" border="0">
  <tr>
    <td><div align="right">Username</div></td>
    <td>
    	<div align="left">
      		<input type="text" class="text ui-widget-content" id="user-login" name="username-login">
    	</div>
    </td>
  </tr>
  <tr>
    <td><div align="right">Password</div></td>
    <td><div align="left">
      <input type="password" class="text ui-widget-content" id="password-login" name="password-login">
    </div></td>
  </tr>
  <tr>
  	<td></td>
  	<td align='center'><input type="submit" class='login-button' value="Login"></td>
  </tr>
</table>

</form>
<script type="text/javascript" >
\$('#user-login').focus();
</script>
</div>
</div>


</body>
</html>
EOF
	if [ $? = 0 ]; then
		echo "Done"
	else echo "Failed"
	fi


	echo -n -e "Generating context.xml ..............................."
	# Generating the DB_CONFIG
	cat > "$LOC_CONTEXT" <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!--
MetaDB: A Distributed Metadata Collection Tool
Copyright 2011, Lafayette College, Eric Luhrs, Haruki Yamaguchi, Long Ho.

This file is part of MetaDB.

    MetaDB is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    MetaDB is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with MetaDB.  If not, see <http://www.gnu.org/licenses/>.
-->
<Context docBase = "metadb"
         path    = "/metadb"
         allowLinking = "true"
         override="true" 
         >

   <Resource name            		= "jdbc/metadb"
             auth            		= "Container"
             type            		= "javax.sql.DataSource"
             factory         		="org.apache.tomcat.dbcp.dbcp.BasicDataSourceFactory"
EOF
	echo -e "\t\tusername = \"$DB_USER\"" >> "$LOC_CONTEXT"
	echo -e "\t\tpassword = \"$DB_PASSWORD\"" >> "$LOC_CONTEXT"
	cat >> "$LOC_CONTEXT" <<EOF
             driverClassName 		= "org.postgresql.Driver"
             url             		= "jdbc:postgresql:metadb"
             maxActive       		= "20"
             maxIdle         		= "10"
             removeAbandonedTimeout	= "30"
			 logAbandoned			= "true"
             maxWait				= "-1"
			 removeAbandoned		= "true"
			 
   />

</Context>
EOF
	if [ $? = 0 ]; then
		echo "Done"
	else echo "Failed"
	fi

	echo -n -e "Generating build.xml ................................."
	# Generating build.xml
	cat > "$LOC_BUILD" <<EOF
<!--
MetaDB: A Distributed Metadata Collection Tool
Copyright 2011, Lafayette College, Eric Luhrs, Haruki Yamaguchi, Long Ho.

This file is part of MetaDB.

    MetaDB is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    MetaDB is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with MetaDB.  If not, see <http://www.gnu.org/licenses/>.
-->
<!-- 
    Project Name :: MetaDB
    Default      :: Run the "reload" target.
    Base Dir     :: Local directory.
-->
<project name    = "MetaDB" 
         default = "reload"
         basedir = ".">

  <!-- ========================================================== -->
  <!-- Define Properties                                          -->

  <!-- Point this build file to the Tomcat installation parts. -->
EOF
	echo "<property name  = \"catalina.home\" value =\"$TOMCAT_PATH\" />" >> "$LOC_BUILD"
	cat >> "$LOC_BUILD" <<EOF
 <!-- Store the username and password in a -->
 <!-- separate file that only my user can read. -->
  <property file = "\${basedir}/etc/user-pass.properties" />

  <property name  = "deploy.dir"
            value = "\${catalina.home}/webapps"/>

  <property name  = "deploy.war"
            value = "\${basedir}/metadb.war"/>
            
  <property name  = "local.src"
            value = "\${basedir}/webapp-src"/>

  <property name  = "local.app"
            value = "\${basedir}/webapp-dir"/>

  <property name="local.images" 
  			value="\${local.app}/images"/>

  <!-- Set the context path. -->
  <property name  = "path"
            value = "."/>
            
  <!-- Properties to access the Manager webapp.-->
  <property name = "manager.url"
            value = "http://localhost:8080/manager"/>
	
	
	
  <!-- ========================================================== -->

  <!-- ========================================================== -->
  <!-- Define Path                                                -->
  <path id="tomcat.lib.classpath">

    <fileset dir="\${catalina.home}/bin">

      <include name="*.jar"/>
    </fileset>

    <fileset dir="\${catalina.home}/server/lib">

      <include name="*.jar"/>
    </fileset>

  </path>
	
  <!-- ========================================================== -->

  <!-- ========================================================== -->
  <!-- Clean the local version of the webapp.                     -->
  <target name        = "clean"
  		  description = "Cleans the build.">
	
  	<delete file = "\${deploy.war}"/>
    <delete dir  = "\${local.app}"/>

  </target>
  <!-- ========================================================== -->

	
	
	
	
  <!-- ========================================================== -->
  <!-- Generate the webapp.                                       -->
  <target name        = "build"
          depends     = "clean"
          description = "Generates the application locally.">

    <!-- build local webapp directory structure -->
    <mkdir dir = "\${local.app}"                  />
    <mkdir dir = "\${local.app}/META-INF"         />
    <mkdir dir = "\${local.app}/WEB-INF"          />
    <mkdir dir = "\${local.app}/WEB-INF/classes"  />
    <mkdir dir = "\${local.app}/META-INF"         />
    
    <!-- load webapp files -->
    <copy todir = "\${local.app}">
      <fileset dir = "\${local.src}/web" />
    </copy>
    
  	<copy file  = "\${local.src}/etc/context.xml"
	        todir = "\${local.app}/META-INF"        />
  	
  	<copy  todir = "\${local.app}/WEB-INF/lib" >
      <fileset dir = "\${local.src}/lib" />
    </copy>

    <copy  todir = "\${local.app}/WEB-INF/src" >
      <fileset dir = "\${local.src}/src" />
    </copy>
  	
  	


  </target>
  <!-- ========================================================== -->

  <!-- ========================================================== -->
  <!-- Compile the class files.                                   -->
  <!-- ========================================================== -->
  <target name        = "compile"
          depends     = "build"
          description = "Compiles all files in the local webapp.">

    <property name = "lib.dir" value = "\${local.src}/lib"/>
    <property name = "src.dir" value = "\${local.src}/src"/>

    <property name  = "classes.dir"
              value = "\${local.app}/WEB-INF/classes" />
	
    <path id  = "classpath">
      <fileset dir = "\${lib.dir}" includes = "**/*.jar"/>
    </path>

  	<javac debug= "on" srcdir       = "\${src.dir}"
           destdir      = "\${classes.dir}"
           classpathref = "classpath">
      <!-- <compilerarg value="-Xlint"/> -->
    </javac>
  	
  	
  	
  </target>

  <!-- ========================================================== -->
  <!-- Build the WAR file.                                        -->
  <target name        = "war"
          depends     = "compile"
          description = "Builds the WAR file.">
  	
    <!-- generate the war file -->
    <war destfile = "\${deploy.war}"
         webxml   = "\${basedir}/webapp-dir/WEB-INF/web.xml"
         basedir  = "\${basedir}/webapp-dir"
         excludes = "WEB-INF/**/*">

      <lib     dir="\${basedir}/webapp-dir/WEB-INF/lib"      />
      <metainf dir="\${basedir}/webapp-dir/META-INF"         />

      <webinf  dir      = "\${basedir}/webapp-dir/WEB-INF"
               excludes = "web.xml"                         />

    </war>
  </target> 
  <!-- ========================================================== -->

  <!-- ========================================================== -->
  <!-- Deploy the webapp, when new.                               -->
  <target name        = "deploy"
          depends     = "war" 
          description = "Deploys the webapp.">

    <copy tofile="\${deploy.dir}/metadb.war">
			<fileset file="\${deploy.war}"/>
	</copy>
  	
  	<!-- link image folder -->
EOF

	if [ ${#TOMCAT_SYMBOLIC_LINK_PATH} != 0 ]; then 
		echo "<sleep seconds=\"10\"/> " >> "$LOC_BUILD"
	echo "<symlink link=\"\${deploy.dir}/metadb/images/projects\" resource=\"$TOMCAT_SYMBOLIC_LINK_PATH\"/>" >> "$LOC_BUILD"
fi

cat >> "$LOC_BUILD" << EOF

</target>
<!-- ========================================================== -->

<!-- ========================================================== -->
<!-- Undeploy the webapp, when new.                             -->

<target name="undeploy" description="Undeploys the webapp.">

        <exec executable="rm">
            <arg value="\${deploy.dir}/metadb/images/projects"/>
        </exec>

	<delete dir="\${local.app}" />
	<delete dir="\${deploy.dir}/metadb"/>
	<delete file="\${deploy.dir}/metadb.war"/>

</target>
<!-- ========================================================== -->

<!-- ========================================================== -->
<!-- Reload the webapp.                                         -->
<target name        = "reload"
	depends   = "undeploy, deploy"
  description = "Reloads the webapp.">
</target>

<!-- ========================================================== -->
</project>
EOF
if [ $? = 0 ]; then
	echo "Done"
else echo "Failed"
fi


echo -n -e "Generating Global.java ..............................."
# Generating the Global.java
cat > "$LOC_GLOBAL" <<EOF
/*
MetaDB: A Distributed Metadata Collection Tool
Copyright 2011, Lafayette College, Eric Luhrs, Haruki Yamaguchi, Long Ho.

This file is part of MetaDB.

    MetaDB is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    MetaDB is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with MetaDB.  If not, see <http://www.gnu.org/licenses/>.

*/
package edu.lafayette.metadb.model.commonops;

/**
* Global variables for MetaDB.
*
* @author Long L. Ho
* @author Miguel Haruki Yamaguchi
* @version 1.0 February 2011
* 
*/
public class Global {
EOF
for item in ${VARS[*]}
do
	
	DATA=(`echo $item | sed -e 's/==/\n/g'`)
	if isNumeric ${DATA[1]}
	then
		printf "	public static final int ${DATA[0]} 		= ${DATA[1]};\n" >> "$LOC_GLOBAL"
	else
		echo "	public static final String ${DATA[0]} 		= \"${DATA[1]}\";" >> "$LOC_GLOBAL"
	fi
done
cat >> "$LOC_GLOBAL" <<EOF
//Database variables
public static final String LDAP_BROWSE_USERNAME 		= LDAP_ID+"="+LDAP_BROWSE_USER+","+LDAP_CONTEXT;
public static final String PROJECTS_TABLE 				= "projects";
public static final String USERS_TABLE 					= "users";
public static final String ELEMENTS_TABLE 				= "elements";
public static final String ADMIN_DESC_TABLE 			= "custom_attributes_adminmd_descmd";
public static final String TECH_TABLE 					= "custom_attributes_techmd";
public static final String ITEMS_ADMIN_DESC_TABLE 		= "projects_adminmd_descmd";
public static final String ITEMS_TECH_TABLE 			= "projects_techmd";
public static final String CONTROLLED_VOCAB_TABLE		= "controlled_vocab";

public static final String CONTROLLED_VOCAB_NAME		= "vocab_name";
public static final String CONTROLLED_VOCAB_VALUES		= "contents";

//Views
public static final String PROJECTS_LIST_VIEW 			= "list_projects";

//Setting names
public static final String DERIV_THUMB_SETTING 			= "thumb";
public static final String DERIV_CUSTOM_SETTING			= "custom";
public static final String DERIV_ZOOM_SETTING			= "large";
public static final String DERIV_FULLSIZE_SETTING		= "fullsize";

//Default colors for brands and bands
public static final String DERIV_DEFAULT_THUMB_FG		= "#000000";
public static final String DERIV_DEFAULT_THUMB_BG		= "#FFFFFF";

public static final String DERIV_DEFAULT_CUSTOM_FG		= "#000000";
public static final String DERIV_DEFAULT_CUSTOM_BG		= "#FFFFFF";

public static final String DERIV_DEFAULT_ZOOM_FG		= "#000000";
public static final String DERIV_DEFAULT_ZOOM_BG		= "#FFFFFF";

public static final String DERIV_DEFAULT_FULL_FG		= "#000000";
public static final String DERIV_DEFAULT_FULL_BG		= "#FFFFFF";

//Database variables
public static final String DERIVATIVE_SETTINGS_TABLE 	= "derivative_settings";
public static final String DERIVATIVE_SETTING_NAME 		= "setting_name";
public static final String DERIVATIVE_MAX_WIDTH 		= "max_width";
public static final String DERIVATIVE_MAX_HEIGHT		= "max_height";		
public static final String DERIVATIVE_BRAND_TEXT		= "brand";
public static final String DERIVATIVE_BG_COLOR			= "bg_color";
public static final String DERIVATIVE_FG_COLOR			= "fg_color";
public static final String DERIVATIVE_ANNOTATION_MODE	= "annotation_mode";
public static final String DERIVATIVE_ENABLED			= "enabled";

//File extensions. Do not change.
public static final String THUMB_EXTENSION				= ".jpg";
public static final String CUSTOM_DERIV_EXTENSION		= ".jpg";
public static final String ZOOM_DERIV_EXTENSION			= ".jpg";
public static final String FULLSIZE_DERIV_EXTENSION		= ".jpg";

//Database variables.
	public static final String PERMISSIONS_TABLE			= "permissions";
	public static final String PERMISSIONS_DATA				= "data";
	public static final String PERMISSIONS_ADMIN_MD			= "admin_md";
	public static final String PERMISSIONS_DESC_MD			= "desc_md";
	public static final String PERMISSIONS_SEARCH			= "search";
	public static final String PERMISSIONS_TABLE_EDIT		= "table_edit";
	public static final String PERMISSIONS_VOCAB			= "controlled_vocab";

	public static final String PROJECT_NAME					= "project_name";
	public static final String PROJECT_NOTES				= "project_notes";
	public static final String PROJECT_BASE_URL				= "deriv_host";

	//Username for use with internal syslog events. Do not change.
	
	public static final String METADB_USER					= "MetaDB";
	public static final String UNKNOWN_USER					= "UNKNOWN";
	//Database variables.
	public static final String USER_NAME					= "user_name";
	public static final String USER_PASSWORD				= "password";
	public static final String USER_TYPE					= "user_type";
	public static final String USER_AUTH_TYPE				= "auth_type";
	public static final String USER_LAST_LOGIN				= "last_login";
	public static final String USER_LAST_ACCESS				= "last_project";
	public static final String USER_ADMIN					= "admin";
	public static final String USER_WORKER					= "worker";
	
	public static final String ELEMENT						= "element";
	public static final String ELEMENT_FORMAT				= "format";

	public static final String ADMIN_DESC_LABEL				= "label";
	public static final String ADMIN_DESC_LARGE				= "large";
	public static final String ADMIN_DESC_R_DATE			= "date_readable";
	public static final String ADMIN_DESC_S_DATE			= "date_searchable";
	public static final String ADMIN_DESC_CONTROLLED		= "controlled";
	public static final String ADMIN_DESC_MULTIPLE			= "multiple";
	public static final String ADMIN_DESC_ADDITIONS			= "additions";
	public static final String ADMIN_DESC_SORTED			= "sorted";
	public static final String ADMIN_DESC_ROW_INDEX			= "attribute_index";
	public static final String ADMIN_DESC_ERROR				= "error";
	public static final String ADMIN_DESC_ID				= "id";
	
	public static final String TECH_ELEMENT					= "tech_element";
	public static final String TECH_LABEL					= "tech_label";
	public static final String TECH_AUTO_ELEMENT			= "format.technical";
	public static final String TECH_ZOOM_ELEMENT			= "identifier";
	public static final String TECH_ZOOM_LABEL				= "url.zoom";

	public static final String TECH_DOWNLOAD_ELEMENT		= "identifier";
	public static final String TECH_DOWNLOAD_LABEL			= "url.download";
	

	public static final String MD_TYPE						= "md_type";
	public static final String MD_TYPE_TECH					= "technical";
	public static final String MD_TYPE_ADMIN				= "administrative";
	public static final String MD_TYPE_DESC					= "descriptive";

	public static final String ITEM_TABLE					= "items";

	public static final String ITEM_NUMBER					= "item_number";
	public static final String ITEM_FILE_NAME				= "file_name";
	public static final String ITEM_THUMB_FILE_NAME			= "thumbnail_file_name";
	public static final String ITEM_CUSTOM_FILE_NAME		= "custom_file_name";
	public static final String ITEM_ZOOM_FILE_NAME			= "large_file_name";
	public static final String ITEM_FULLSIZE_FILE_NAME		= "fullsize_file_name";
	public static final String ITEM_LOCKER					= "locker";
	public static final String ITEM_CHECKSUM				= "checksum";
	public static final String ITEM_DATE					= "date";

	public static final String TECH_CHECKSUM				= "Checksum";
	public static final String TECH_FILENAME				= "FileName";
	public static final String TECH_DATE_MODIFIED			= "DateModified";
	
	public static final String ITEM_ADMIN_DESC_DATA			= "data";
	public static final String ITEM_TECH_DATA				= "tech_data";

	public static final String SYSLOG_TABLE					= "system_log";
	public static final String SYSLOG_EVENT_ID				= "event_id";
	public static final String SYSLOG_EVENT_TYPE			= "event_type";
	public static final String SYSLOG_EVENT_TIME			= "event_time";
	public static final String SYSLOG_EVENT_TEXT			= "event";

	//System log event types (fixed)
	public static final String SYSLOG_AUTH					= "Authentication";
	public static final String SYSLOG_PROJECT				= "Project Logs";
	public static final String SYSLOG_ERROR					= "Error";
	public static final String SYSLOG_FATAL_ERROR			= "Fatal Error";
	public static final String SYSLOG_SYSTEM				= "System Messages";
	public static final String SYSLOG_NOTIFICATION			= "Notification";
	public static final String SYSLOG_PARSER				= "Parser Logs";
	public static final String SYSLOG_DEBUG					= "Debug";
	public static final String SYSLOG_PERMISSION			= "Permission";
	
	//Ctrl toggles
	public static final String CTRL_TABLE					= "misc_ctrls";
	public static final String CTRL_NAME					= "ctrl_name";
	public static final String CTRL_STATUS					= "ctrl_status";
	
	//Boolean globals
	public static final String CTRL_PARSER					= "parser";
	
	//Session variables. Do not change.
	public static final String SESSION_PROJECT				= "working-project";
	public static final String SESSION_USERNAME				= "username";
	public static final String SESSION_BINDER				= "binder";
	public static final String SESSION_LOGIN_TIME			= "last_login";
	public static final String SESSION_BYPASS				= "bypass";
	public static final String SESSION_AUTH_COOKIE 			= "authenticated";

	
	//UI variables. Do not change.
	public static final int IMAGE_FRAME_WIDTH				= 348;
	public static final int IMAGE_FRAME_HEIGHT				= 348;
	public static final int IMAGE_DIMENSION					= 300;

	public static final String PATH_PROJECT					= "images/projects/";
	public static final String PATH_THUMB					= "thumbnail/";
	public static final String PATH_ACCESS					= "access/";
	
	//Web related
	public static final String ZOOM_URL_PROJ				= "\$proj";
	public static final String ZOOM_URL_ITEM				= "\$item";
	public static final String ZOOM_URL_BASE				= "zoom.html?item="+ZOOM_URL_PROJ+"-"+ZOOM_URL_ITEM;
	
	public static final String DOWNLOAD_URL_BASE			= "download.html?item="+ZOOM_URL_PROJ+"-"+ZOOM_URL_ITEM;
	public static final String DOWNLOAD_URL_PROJ			= "\$proj";
	public static final String DOWNLOAD_URL_ITEM			= "\$item";
	
	//Put the validation table data here
	public static String[] mdTypes = {MD_TYPE_TECH, MD_TYPE_ADMIN, MD_TYPE_DESC};
	public static String[] eventTypes={SYSLOG_AUTH, SYSLOG_PROJECT, SYSLOG_ERROR, 
		SYSLOG_FATAL_ERROR, SYSLOG_SYSTEM, SYSLOG_NOTIFICATION, SYSLOG_PARSER, SYSLOG_DEBUG};
	public static String[] userTypes = {USER_ADMIN, USER_WORKER};
	
}
EOF
	if [ $? = 0 ]; then
		echo "Done"
	else echo "Failed"
	fi

	echo -n -e "Generating metadb-install.sql ........................"
	# Generating the SQL
	cat > "$LOC_SQL" <<EOF

/*
MetaDB: A Distributed Metadata Collection Tool
Copyright 2011, Lafayette College, Eric Luhrs, Haruki Yamaguchi, Long Ho.

This file is part of MetaDB.

    MetaDB is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    MetaDB is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with MetaDB.  If not, see <http://www.gnu.org/licenses/>.
*/
 /*
 This is MetaDB's main database script. 
 The section below will recreate all of MetaDB's tables. 
 Do not run this script more than once as it deletes all data. 
 If you have to rebuild MetaDB, backup your database before doing so.
 */
DROP TABLE projects CASCADE;
DROP TABLE permissions CASCADE;
DROP TABLE permission_types CASCADE;
DROP TABLE derivative_settings CASCADE;
DROP TABLE projects_techmd CASCADE ;
DROP TABLE projects_adminmd_descmd CASCADE;
DROP TABLE system_log CASCADE;
DROP TABLE controlled_vocab CASCADE;
DROP TABLE custom_attributes_adminmd_descmd CASCADE;
DROP TABLE custom_attributes_techmd CASCADE;
DROP TABLE users CASCADE;
DROP TABLE items CASCADE;
DROP TABLE event_types CASCADE;
DROP TABLE user_types CASCADE;	
DROP TABLE md_types CASCADE;
DROP TABLE elements CASCADE;
DROP TABLE misc_ctrls CASCADE;

CREATE TABLE elements (
       element VARCHAR(50) NOT NULL
     , format VARCHAR(50) NOT NULL
     , PRIMARY KEY (element)
);

CREATE TABLE md_types (
       md_type VARCHAR(50) NOT NULL
     , PRIMARY KEY (md_type)
);

CREATE TABLE user_types (
       user_type VARCHAR(50) NOT NULL
     , PRIMARY KEY (user_type)
);

CREATE TABLE event_types (
       event_type VARCHAR(50) NOT NULL
     , PRIMARY KEY (event_type)
);




CREATE TABLE projects (
       project_name VARCHAR(50) NOT NULL
     , project_notes TEXT NOT NULL
     , deriv_host TEXT NOT NULL
     , PRIMARY KEY (project_name)
);

CREATE VIEW list_projects AS SELECT projects.project_name FROM projects ORDER BY projects.project_name;

CREATE TABLE items (
		project_name VARCHAR(50) NOT NULL
     , item_number INTEGER NOT NULL
     , file_name TEXT NOT NULL
     , thumbnail_file_name TEXT DEFAULT ''
     , custom_file_name TEXT DEFAULT ''
     , large_file_name TEXT DEFAULT ''
     , fullsize_file_name TEXT DEFAULT ''   
     , locker TEXT DEFAULT ''
     , checksum VARCHAR(1000) NOT NULL
     , date VARCHAR(50)
     , PRIMARY KEY (project_name, item_number)
     , CONSTRAINT FK_items_1 FOREIGN KEY (project_name) 
     				REFERENCES projects(project_name) ON DELETE CASCADE ON UPDATE CASCADE
    );

CREATE TABLE users (
       user_name VARCHAR(15) NOT NULL
     , password TEXT NOT NULL
     , user_type VARCHAR(50) NOT NULL
     , auth_type VARCHAR(15) NOT NULL
     , last_login BIGINT DEFAULT 0
     , last_project VARCHAR(50)
     , PRIMARY KEY (user_name)
     , CONSTRAINT FK_users_1 FOREIGN KEY (user_type)
                  REFERENCES user_types (user_type) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE custom_attributes_techmd (

		project_name VARCHAR(50) NOT NULL
     , tech_element VARCHAR(50) NOT NULL
     , tech_label VARCHAR(50) NOT NULL
     , PRIMARY KEY (project_name, tech_element, tech_label)
     , CONSTRAINT FK_custom_attributes_techmd FOREIGN KEY (project_name)
                  REFERENCES projects (project_name) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE controlled_vocab (
    	vocab_name VARCHAR(50) NOT NULL PRIMARY KEY
     , contents TEXT
);

CREATE TABLE custom_attributes_adminmd_descmd (
       project_name VARCHAR(50) NOT NULL
     , element VARCHAR(50) NOT NULL
     , label VARCHAR(50) DEFAULT ''
     , md_type VARCHAR(50) NOT NULL
     , large BOOLEAN NOT NULL
     , date_searchable BOOLEAN NOT NULL
     , date_readable BOOLEAN NOT NULL
     , controlled BOOLEAN NOT NULL
     , multiple BOOLEAN NOT NULL
     , additions BOOLEAN NOT NULL
     , sorted BOOLEAN NOT NULL
     , attribute_index INTEGER NOT NULL
     , vocab_name VARCHAR(50) DEFAULT ''
     , error BOOLEAN DEFAULT 'f'
     , id SERIAL
     , PRIMARY KEY (project_name, element, label, md_type)
     , CONSTRAINT FK_custom_attributes_adminmd_descmd_1 FOREIGN KEY (md_type)
                  REFERENCES md_types (md_type) ON DELETE CASCADE ON UPDATE CASCADE
     , CONSTRAINT FK_custom_attributes_adminmd_descmd_2 FOREIGN KEY (project_name)
                  REFERENCES projects (project_name) ON DELETE CASCADE ON UPDATE CASCADE
     , CONSTRAINT FK_custom_attributes_adminmd_descmd_3 FOREIGN KEY (element)
                  REFERENCES elements (element) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE system_log (
       event_id SERIAL UNIQUE
     , user_name VARCHAR(15) NOT NULL
     , event_type VARCHAR(50) NOT NULL
     , event TEXT
     , event_time TIMESTAMP NOT NULL
     , PRIMARY KEY (event_id)
     , CONSTRAINT FK_dblog_1 FOREIGN KEY (event_type)
                  REFERENCES event_types (event_type) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE projects_adminmd_descmd (
       project_name VARCHAR(50) NOT NULL
     , item_number INTEGER NOT NULL
     , md_type VARCHAR(50) NOT NULL
     , element VARCHAR(50) NOT NULL
     , label VARCHAR(50) NOT NULL
     , data TEXT DEFAULT ' '

     , PRIMARY KEY (project_name, item_number, element, label)
     , CONSTRAINT FK_projects_adminmd_descmd_1 FOREIGN KEY (project_name)
                  REFERENCES projects (project_name) ON DELETE CASCADE ON UPDATE CASCADE
     , CONSTRAINT FK_projects_adminmd_descmd_3 FOREIGN KEY (project_name, item_number)
                  REFERENCES items (project_name, item_number) ON DELETE CASCADE ON UPDATE CASCADE
     , CONSTRAINT FK_projects_adminmd_descmd_4 FOREIGN KEY (project_name, element, label, md_type)
                  REFERENCES custom_attributes_adminmd_descmd (project_name, element, label, md_type) ON DELETE CASCADE ON UPDATE CASCADE


);

CREATE TABLE projects_techmd (

       project_name VARCHAR(50) NOT NULL
     , item_number INTEGER NOT NULL
     , tech_element VARCHAR(50) NOT NULL
     , tech_label VARCHAR(50) NOT NULL
 	  , tech_data TEXT DEFAULT ''

     , PRIMARY KEY (project_name, item_number, tech_element, tech_label)
     , CONSTRAINT FK_projects_techmd_1 FOREIGN KEY (project_name)
                  REFERENCES projects (project_name) ON DELETE CASCADE ON UPDATE CASCADE
     , CONSTRAINT FK_projects_techmd_2 FOREIGN KEY (project_name, item_number) 
                  REFERENCES items (project_name, item_number) ON DELETE CASCADE ON UPDATE CASCADE
     , CONSTRAINT FK_projects_techmd_3 FOREIGN KEY (project_name, tech_element, tech_label)
                  REFERENCES custom_attributes_techmd (project_name, tech_element, tech_label) ON DELETE CASCADE ON UPDATE CASCADE

);



CREATE TABLE permission_types(
		permission_type VARCHAR(50) NOT NULL
	  , PRIMARY KEY (permission_type)
);

CREATE TABLE permissions (
       project_name VARCHAR(50) NOT NULL
     , user_name VARCHAR(50) NOT NULL
     , data VARCHAR(50) NOT NULL
     , admin_md VARCHAR(50) NOT NULL
     , desc_md VARCHAR(50) NOT NULL
     , table_edit VARCHAR(50) NOT NULL
     , controlled_vocab VARCHAR(50) NOT NULL
     , PRIMARY KEY (project_name, user_name)
     , CONSTRAINT FK_permissions_1 FOREIGN KEY (project_name)
                  REFERENCES projects (project_name) ON DELETE CASCADE ON UPDATE CASCADE
     , CONSTRAINT FK_permissions_2 FOREIGN KEY (user_name)
                  REFERENCES users (user_name) ON DELETE CASCADE ON UPDATE CASCADE
     , CONSTRAINT FK_permissions_3 FOREIGN KEY (data)
     				REFERENCES permission_types(permission_type)
     , CONSTRAINT FK_permissions_5 FOREIGN KEY (admin_md)
     				REFERENCES permission_types(permission_type)
     , CONSTRAINT FK_permissions_6 FOREIGN KEY (desc_md)
     				REFERENCES permission_types(permission_type)
     , CONSTRAINT FK_permissions_7 FOREIGN KEY (table_edit)
     				REFERENCES permission_types(permission_type)
     , CONSTRAINT FK_permissions_8 FOREIGN KEY (controlled_vocab)
     				REFERENCES permission_types(permission_type)
);

CREATE TABLE derivative_settings (
		project_name VARCHAR(50) NOT NULL
		, setting_name TEXT NOT NULL
		, max_width INTEGER NOT NULL
		, max_height INTEGER NOT NULL
		, brand TEXT DEFAULT ''
		, bg_color TEXT DEFAULT '#000000'
		, fg_color TEXT DEFAULT '#FFFFFF'
		, annotation_mode INTEGER NOT NULL
		, enabled BOOLEAN NOT NULL DEFAULT 'f'
		, PRIMARY KEY(project_name, setting_name)
		, CONSTRAINT FK_derivatives_1 FOREIGN KEY (project_name)
					REFERENCES projects (project_name) ON DELETE CASCADE ON UPDATE CASCADE
		);
		
CREATE TABLE misc_ctrls ( 
		ctrl_name text NOT NULL
		, 
		ctrl_status BOOLEAN DEFAULT 'f'
		);

--
--Insert default config values
--	
INSERT INTO user_types VALUES('admin');
INSERT INTO user_types VALUES('worker');

INSERT INTO permission_types VALUES ('export');
INSERT INTO permission_types VALUES ('import_export');
INSERT INTO permission_types VALUES ('none');

INSERT INTO permission_types VALUES ('read');
INSERT INTO permission_types VALUES ('read_write');

INSERT INTO permission_types VALUES ('deny');
INSERT INTO permission_types VALUES ('allow');

INSERT INTO md_types VALUES ('descriptive');
INSERT INTO md_types VALUES ('administrative');
INSERT INTO md_types VALUES ('technical');

INSERT INTO event_types VALUES('Authentication');
INSERT INTO event_types VALUES('Project Logs');
INSERT INTO event_types VALUES('Error');
INSERT INTO event_types VALUES('Fatal Error');
INSERT INTO event_types VALUES('System Messages');
INSERT INTO event_types VALUES('Debug');
INSERT INTO event_types VALUES('Notification');
INSERT INTO event_types VALUES('Parser Logs');

INSERT INTO misc_ctrls VALUES ('parser', 'f');
EOF
	for item in ${METADATA[*]}
	do
		IFS=',' read -ra DATA <<< "$item"
		echo "INSERT INTO ELEMENTS VALUES('${DATA[0]}', '${DATA[1]}');" >> "$LOC_SQL"
	done
	if [ $? = 0 ]; then
		echo "Done"
	else echo "Failed"
	fi
fi
